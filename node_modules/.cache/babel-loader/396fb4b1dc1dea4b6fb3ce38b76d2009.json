{"ast":null,"code":"var _jsxFileName = \"/Users/abhigyanagarwal/Desktop/HTML/React/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport noteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // Get all Notes\n\n  const getNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  }; // Add a Note\n\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnotes `, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = {\n      _id: \"6223612df7a950ecdc1c2ca6\",\n      user: \"620dfa80e8e9e19bead316bc\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2022-03-05T13:10:05.576Z\",\n      __v: 0\n    };\n    setNotes(notes.concat(note));\n  }; // Delete a Note\n\n\n  const deleteNote = id => {\n    // Logic to Delete\n    console.log(\"Deleting Note with \" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json(); // Logic to edit in client\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      editNote,\n      deleteNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhigyanagarwal/Desktop/HTML/React/inotebook/src/context/notes/NoteState.js"],"names":["noteContext","useState","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","_id","user","date","__v","concat","deleteNote","id","newNotes","filter","editNote","index","length","element","children"],"mappings":"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","sourcesContent":["import noteContext from \"./noteContext\";\nimport { useState } from \"react\";\n\nconst NoteState = (props) => {\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // Get all Notes\n  const getNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\",\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  // Add a Note\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnotes `, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\",\n      },\n      body: JSON.stringify({ title, description, tag }),\n    });\n    const note = {\n      _id: \"6223612df7a950ecdc1c2ca6\",\n      user: \"620dfa80e8e9e19bead316bc\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2022-03-05T13:10:05.576Z\",\n      __v: 0,\n    };\n    setNotes(notes.concat(note));\n  };\n\n  // Delete a Note\n  const deleteNote = (id) => {\n    // Logic to Delete\n    console.log(\"Deleting Note with \" + id);\n    const newNotes = notes.filter((note) => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\",\n      },\n      body: JSON.stringify({ title, description, tag }),\n    });\n    const json = response.json();\n    // Logic to edit in client\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n\n  return (\n    <noteContext.Provider\n      value={{ notes, setNotes, addNote, editNote, deleteNote, getNotes }}\n    >\n      {props.children}\n    </noteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}