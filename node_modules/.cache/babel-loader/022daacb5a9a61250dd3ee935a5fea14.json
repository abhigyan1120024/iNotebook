{"ast":null,"code":"var _jsxFileName = \"/Users/abhigyanagarwal/Desktop/HTML/React/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport noteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [{\n    _id: \"621e045da9554ac3a47ffec0\",\n    user: \"620dfa80e8e9e19bead316bc\",\n    title: \"My First Note\",\n    description: \"Hello Everyone, this is my first note\",\n    tag: \"Personal\",\n    date: \"2022-03-01T11:32:45.927Z\",\n    __v: 0\n  }, {\n    _id: \"6223612df7a950ecdc1c2ca6\",\n    user: \"620dfa80e8e9e19bead316bc\",\n    title: \"My Second Note\",\n    description: \"Hello Everyone, this is my second note\",\n    tag: \"Personal\",\n    date: \"2022-03-05T13:10:05.576Z\",\n    __v: 0\n  }];\n  const [notes, setNotes] = useState(notesInitial); // Add a Note\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${url}/api/notes/addnotes `, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n\n    });\n    const note = {\n      _id: \"6223612df7a950ecdc1c2ca6\",\n      user: \"620dfa80e8e9e19bead316bc\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2022-03-05T13:10:05.576Z\",\n      __v: 0\n    };\n    setNotes(notes.concat(note));\n  }; // Delete a Note\n\n\n  const deleteNote = id => {\n    console.log(\"Deleting Note with \" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${url}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\"\n      },\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    });\n    const json = response.json();\n\n    for (let index = 0; index < notes.length; index++) {\n      // Logic to edit in client\n      const element = notes[index];\n\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      editNote,\n      deleteNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhigyanagarwal/Desktop/HTML/React/inotebook/src/context/notes/NoteState.js"],"names":["noteContext","useState","NoteState","props","host","notesInitial","_id","user","title","description","tag","date","__v","notes","setNotes","addNote","response","fetch","url","method","headers","body","JSON","stringify","note","concat","deleteNote","id","console","log","newNotes","filter","editNote","data","json","index","length","element","children"],"mappings":"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","sourcesContent":["import noteContext from \"./noteContext\";\nimport { useState } from \"react\";\n\nconst NoteState = (props) => {\n  const host = \"http://localhost:5000\";\n  const notesInitial = [\n    {\n      _id: \"621e045da9554ac3a47ffec0\",\n      user: \"620dfa80e8e9e19bead316bc\",\n      title: \"My First Note\",\n      description: \"Hello Everyone, this is my first note\",\n      tag: \"Personal\",\n      date: \"2022-03-01T11:32:45.927Z\",\n      __v: 0,\n    },\n    {\n      _id: \"6223612df7a950ecdc1c2ca6\",\n      user: \"620dfa80e8e9e19bead316bc\",\n      title: \"My Second Note\",\n      description: \"Hello Everyone, this is my second note\",\n      tag: \"Personal\",\n      date: \"2022-03-05T13:10:05.576Z\",\n      __v: 0,\n    },\n  ];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // Add a Note\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${url}/api/notes/addnotes `, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\",\n      },\n      body: JSON.stringify({ title, description, tag }), // body data type must match \"Content-Type\" header\n    });\n    const note = {\n      _id: \"6223612df7a950ecdc1c2ca6\",\n      user: \"620dfa80e8e9e19bead316bc\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2022-03-05T13:10:05.576Z\",\n      __v: 0,\n    };\n    setNotes(notes.concat(note));\n  };\n\n  // Delete a Note\n  const deleteNote = (id) => {\n    console.log(\"Deleting Note with \" + id);\n    const newNotes = notes.filter((note) => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${url}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIwZGZhODBlOGU5ZTE5YmVhZDMxNmJjIn0sImlhdCI6MTY0NTA5NzIyNX0.yEfB6z2AX1qDF5VCZZR614HPw3WqHTLbmVr5M9LYxvQ\",\n      },\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    });\n    const json = response.json();\n    for (let index = 0; index < notes.length; index++) {\n      // Logic to edit in client\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n\n  return (\n    <noteContext.Provider\n      value={{ notes, setNotes, addNote, editNote, deleteNote }}\n    >\n      {props.children}\n    </noteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}