{"ast":null,"code":"var _jsxFileName = \"/Users/abhigyanagarwal/Desktop/HTML/React/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport noteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n  const userInitial = [];\n  const [user, setUser] = useState(userInitial); // Get all Notes\n\n  const getNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  }; // Add a Note\n\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnotes `, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  }; // Delete a Note\n\n\n  const deleteNote = async id => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    }); // Logic to Delete\n\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); // Logic to edit in client\n\n    let newNotes = JSON.parse(JSON.stringify(notes));\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  }; // Get User Data\n\n\n  const getUser = async () => {\n    // API Call\n    const response = await fetch(`${host}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      editNote,\n      deleteNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"22Tcv00kLm3lmkSO7zMOiFAH5qY=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhigyanagarwal/Desktop/HTML/React/inotebook/src/context/notes/NoteState.js"],"names":["noteContext","useState","NoteState","props","host","notesInitial","notes","setNotes","userInitial","user","setUser","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","getUser","children"],"mappings":"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","sourcesContent":["import noteContext from \"./noteContext\";\nimport { useState } from \"react\";\n\nconst NoteState = (props) => {\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n  const userInitial = [];\n  const [user, setUser] = useState(userInitial);\n\n  // Get all Notes\n  const getNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n    });\n    const json = await response.json();\n    setNotes(json);\n  };\n\n  // Add a Note\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnotes `, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n      body: JSON.stringify({ title, description, tag }),\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n\n  // Delete a Note\n  const deleteNote = async (id) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n    });\n    // Logic to Delete\n    const newNotes = notes.filter((note) => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n      body: JSON.stringify({ title, description, tag }),\n    });\n    // Logic to edit in client\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n\n  // Get User Data\n  const getUser = async () => {\n    // API Call\n    const response = await fetch(`${host}`)\n  }\n\n  return (\n    <noteContext.Provider\n      value={{ notes, setNotes, addNote, editNote, deleteNote, getNotes }}\n    >\n      {props.children}\n    </noteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}